#!/bin/bash

PP_PID=$$

PIDFILE="/tmp/piratepython.pid"
PYTHONPIDFILE="/tmp/piratepython.python.pid"

BOOT_LOG="/home/pirate/boot.log"

PYTHON_LOG="/home/pirate/python.log"
PYTHON_TTY="/dev/ttyGS0"
PYTHON_OUTPUT="$PYTHON_LOG $PYTHON_TTY"

PYTHON_PID=-1

GS0_MODE="debug"
GS1_MODE="terminal"

# Some default settings for the settings.txt file
CODE_AUTORELOAD=true
CODE_DEPLOY=false

SYSTEM_HOSTNAME="piratepython"
SYSTEM_PASSWORD="p1r4t3"

NETWORK_ENABLED=true
NETWORK_MODE="wifi"

BLUETOOTH_ENABLED=false

USB_ETHERNET="windows"

# Block multiple instances
if [ -f "$PIDFILE" ]; then
	PID=`cat $PIDFILE`
	kill -0 $PID
	RESULT=$?
	if [ $RESULT -eq 0 ]; then
		if [ "$1" == "stop" ]; then
			echo "Stopping existing PiratePython process! PID: $PID"
			PPID=`cat $PYTHONPIDFILE`
			kill -0 $PPID
			RESULT=$?
			if [ $RESULT -eq 0 ]; then
				echo "Stopping python child! PID: $PID"
				kill $PPID
			fi
			rm -f $PIDFILE
			rm -f $PYTHONPIDFILE
			kill $PID
			exit $?
		else
			echo "Existing PiratePython process running? PID: $PID"
			exit 1
		fi
	fi
	rm -f $PIDFILE
	rm -rf $PYTHONPIDFILE
fi

chown -R pirate:pirate /home/pirate
mount /boot

# Wait for /boot
while [ ! -f /boot/initrd ]; do sleep 1; done

# Mount any package files
if [ -d /boot/packages ]; then
	for f in /boot/packages/*.img; do
		filename=$(basename "$f")
		imagename="${filename%.*}"
		mountpoint="/opt/$imagename"
		mkdir -p $mountpoint
		mount $f $mountpoint
		cd $mountpoint
		./init
		cd /
	done;
fi;

# Wait for USB
while [ ! -d /sys/kernel/config/usb_gadget/g1 ]; do sleep 1; done

# Wait for TTY
while [ ! -c $PYTHON_TTY ]; do sleep 1; done

if [ "$1" == "stop" ]; then
	echo "No existing PiratePython process found!"
	exit 0
fi

# Re-acquire existing Python PID
if [ -f "$PYTHONPIDFILE" ]; then
	PPID=`cat $PYTHONPIDFILE`
	kill -0 $PPID
	RESULT=$?
	if [ $RESULT -eq 0 ]; then
		PYTHON_PID="$PPID"
	else
		rm -f $PYTHONPIDFILE
	fi
fi

echo "$PP_PID" > $PIDFILE

function changed {
	diff /tmp/_$1 /tmp/$1 > /dev/null 2>&1
	if [ $? -eq 1 ]; then
		true
	else
		false
	fi
}

function update_settings {
	if changed "settings.txt"; then
		mv /tmp/_settings.txt /tmp/settings.txt
		/sbin/piratepython-configparse > /tmp/_settings.sh
		if [ "$?" == "0" ]; then
			mv /tmp/_settings.sh /tmp/settings.sh
			source /tmp/settings.sh

			if [ "$SYSTEM_HOSTNAME" != "" ]; then
				OLD_HOSTNAME=`cat /etc/hostname`
				if [ "$OLD_HOSTNAME" != "$SYSTEM_HOSTNAME" ]; then
					echo "Changing hostname from $OLD_HOSTNAME to $SYSTEM_HOSTNAME"
					sed -i "s/127.0.0.1\s\{1,\}$OLD_HOSTNAME/127.0.0.1\t$SYSTEM_HOSTNAME/" /etc/hosts
					echo "$SYSTEM_HOSTNAME" > /etc/hostname
					hostname "$SYSTEM_HOSTNAME"
				fi
			fi

			if [ "$SYSTEM_PASSWORD" != "" ]; then
				echo "pirate:$SYSTEM_PASSWORD" | chpasswd
			fi

			if [ ! $NETWORK_ENABLED ]; then
				systemctl stop dhcpd
				systemctl stop wpa_supplicant@wlan0
				systemctl stop wpa_supplicant_ap@wlan0
				ifconfig wlan0 down
			elif [ "$NETWORK_MODE" == "wifi" ]; then
				if ! systemctl is-active wpa_supplicant@wlan0 > /dev/null; then
					echo "Enabling Wifi: Client Mode"
					ifconfig wlan0 up
					systemctl stop dhcpd
					ifconfig wlan0 dynamic
					systemctl start wpa_supplicant@wlan0
				fi
			elif [ "$NETWORK_MODE" == "ap" ]; then
				if ! systemctl is-active wpa_supplicant_ap@wlan0 > /dev/null; then
					echo "Enabling WiFi: Access-point Mode"
					ifconfig wlan0 up
					systemctl start wpa_supplicant_ap@wlan0
					ifconfig wlan0 10.0.3.1
					systemctl start dhcpd
				fi
			fi
		fi
	fi
}

function update_mainpy {
	if changed "main.py"; then
		mv /tmp/_main.py /tmp/main.py
		launch_script
	fi
}

function update_configs {
	# Compare wpa_supplicant.conf to cached version, and update if needed
	if changed "wpa_supplicant.conf"; then
		cp /tmp/_wpa_supplicant.conf /tmp/wpa_supplicant.conf
		cp /tmp/_wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
		if [ "`systemctl is-active wpa_supplicant@wlan0.service`" == "active" ]; then
			systemctl restart wpa_supplicant@wlan0
		fi
	fi

	if changed "wpa_supplicant_ap.conf"; then
		cp /tmp/_wpa_supplicant_ap.conf /tmp/wpa_supplicant_ap.conf
		cp /tmp/_wpa_supplicant_ap.conf /etc/wpa_supplicant/wpa_supplicant_ap-wlan0.conf
		if [ "`systemctl is-acive wpa_supplicant_ap@wlan0.service`" == "active" ]; then
			systemctl restart wpa_supplicant_ap@wlan0
		fi
	fi
}

function wait_for_change {
	while read -r action; do
                echo $action
		update_settings
		update_configs
		if $CODE_AUTORELOAD; then
			update_mainpy
		fi
		sleep 0.01
	done < <(PYTHONUNBUFFERED=1 /usr/bin/python3 /sbin/piratepython-sync)
}

function launch_script {
	echo "Relaunching /boot/main.py"

	if [ -f "$PYTHON_LOG" ]; then
		rm -f $PYTHON_LOG
		touch $PYTHON_LOG
	fi

	if [ ! $PYTHON_PID -eq -1 ]; then
		/bin/kill $PYTHON_PID
	fi

	PYTHON_OUTPUT="$PYTHON_LOG $PYTHON_TTY"
	timeout 0.1 bash -c "echo \"---------- Restarting main.py ----------\" > $PYTHON_TTY"
	RESULT=$?
	echo "Result: $RESULT"
	if [ $RESULT -eq 124 ]; then
		echo "Timeout on $PYTHON_TTY, using logfile"
		echo "Timeout on $PYTHON_TTY" > $PYTHON_LOG
		echo "---------- Restarting main.py ----------" > $PYTHON_LOG
		# ttyGS0 has timed out!
		PYTHON_OUTPUT="$PYTHON_LOG"
	fi
	PYTHONPATH=/boot/libraries PYTHONUNBUFFERED=1 /usr/bin/python3 /tmp/main.py > >( tee -a $PYTHON_OUTPUT > /dev/null 2>&1 ) 2>&1 &
	PYTHON_PID=$!
	echo "$PYTHON_PID" > $PYTHONPIDFILE
}

BOOT_OUTPUT="$BOOT_LOG $PYTHON_TTY"

# Check to see if ttyGS0 is functional
timeout 0.1 bash -c "echo \"Serial debug enabled!\" > $PYTHON_TTY"
RESULT=$?
echo "Result: $RESULT"
if [ $RESULT -eq 124 ]; then
	echo "Timeout on $PYTHON_TTY, using logfile"
	echo "Timeout on $PYTHON_TTY" >> $BOOT_LOG
	# ttyGS0 has timed out!
	BOOT_OUTPUT="$BOOT_LOG"
fi

# Copy the localtime file if it exists
if [ -f /boot/localtime ]; then
	cp /boot/localtime /etc/localtime
	echo "Using /boot/localtime, time: $(date)" | tee -a $BOOT_OUTPUT
fi

COPYTOTMP=( main.py settings.txt wpa_supplicant.conf wpa_supplicant_ap.conf )

for file in ${COPYTOTMP[@]}; do
	if [ -f /boot/$file ]; then
		cp /boot/$file /tmp/_$file
		touch /tmp/$file
	fi
done

update_configs
update_settings

# Check for, and run boot.sh
if [ -f /boot/boot.sh ]; then
	bash /boot/boot.sh 2>&1 | tee -a $BOOT_OUTPUT
fi

# Check for, and run boot.py
if [ -f /boot/boot.py ]; then
	PYTHONPATH=/boot/libraries PYTHONUNBUFFERED=1 /usr/bin/python3 /boot/boot.py 2>&1 | tee -a $BOOT_OUTPUT
fi

update_mainpy

wait_for_change
